package learn.gomoku.ui;

import learn.gomoku.game.Gomoku;
import learn.gomoku.game.Result;
import learn.gomoku.game.Stone;
import learn.gomoku.players.HumanPlayer;
import learn.gomoku.players.Player;
import learn.gomoku.players.RandomPlayer;
import learn.gomoku.players.ThoughtfulPlayer;
import learn.gomoku.utilities.ConsoleHelper;

import java.util.ArrayList;

/**
 * The Controller Class initiates and handles the game play for gomoku games.
 */
public class Controller {

    //Player variables
    private Player playerOne;
    private Player playerTwo;

    //Board print characters
    private final String BLACK = " x";
    private final String WHITE = " o";
    private final String EMPTY = " _";

    //Colors used on the board. Placed in the field variables for easy accessibility.
    //Colors are written in RGB format "\033[xx;x;R;G;Bm"
    private final String BACKGROUND_COLOR = "\033[48;2;115;84;55m";
    private final String BACKGROUND_COLOR_COMP = "\033[48;2;35;35;35m";
    private final String RESET_COLORS = "\033[0m";
    private final String BLACK_TEXT = "\033[38;2;0;0;0m";
    private final String WHITE_TEXT = "\033[38;2;255;255;255m";
    private final String COMP_TEXT_COLOR1 = "\033[38;2;91;140;39m";
    private final String COMP_TEXT_COLOR2 = "\033[38;2;39;140;138m";
    private final String DEFAULT_TEXT_COLOR = "\033[39m";



    //The gomoku game instance
    private Gomoku game;

    //For input and output prompts
    private static final ConsoleHelper io = new ConsoleHelper();


    /**
     * Starts a new game of gomoku.
     * Displays a welcome message and goes through the
     * setup, game loop, and asks to play again.
     */
    public void run() {
        //display welcome message
        io.heading("Welcome to Gomoku");

        //set up the players, clear the board, and create a new gomoku instance
        setUp();

        //Game Loop
        gameLoop();

        //ask to play again
        playAgain();

    }

    /**
     * Creates an instance of Player.
     * User is prompted for a choice of Player either as Human or Random
     *
     * @param player the title of the player, either Player 1 or Player 2
     */
    private static Player playerMenu(String player) {
        String choice = io.prompt(1, 3, String.format(player + " is:" +
                "%n1. Human" +
                "%n2. Random Player" +
                "%n3. Thoughtful Player" +
                "%nSelect [1-3]: "));
        if (choice.equals("1")) {
            System.out.println();
            String name = io.prompt(player + ", enter your name: ");
            return new HumanPlayer(name);

        } else if (choice.equals("2")) {
            return new RandomPlayer();
        } else {
            return new ThoughtfulPlayer();
        }


    }

    /**
     * Gets the player to make a move. If human, the player is prompted.
     * If RandomPlayer instance, then generateMove is called
     *
     * @param player the player whose turn it is
     * @return returns a Stone representing the player's move
     */
    private Stone makeMove(Player player) {
        Stone stone = player.generateMove(game.getStones());

        //check if Random or Human. Human will generate a null stone.
        if (stone == null) {
            //prompt for row and column choice. Subtract one since the coordinates are off by 1
            int row = Integer.parseInt(io.prompt(1, 15, "Enter a row: ")) - 1;
            int col = Integer.parseInt(io.prompt(1, 15, "Enter a column: ")) - 1;

            //get the color of the stone - from RandomPlayer's code
            boolean isBlack = game.isBlacksTurn();
            return new Stone(row, col, isBlack);
        }

        //the stone was generated by a RandomPlayer
        return stone;
    }

    /**
     * Prints the board.
     * Player stones are printed from the PlayedStones ArrayList.
     */
    private void printBoard() {
        //a variable to hold information if the stone was printed
        boolean stoneWasPrinted;


        //iterate through the rows
        for (int row = 0; row < Gomoku.WIDTH; row++) {
            //print the numbers for the first row before printing anything else
            if (row == 0) {
                System.out.print(COMP_TEXT_COLOR1);
                System.out.println("   " + BACKGROUND_COLOR_COMP + " 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 " + RESET_COLORS);
            }

            //iterate through the columns
            for (int col = 0; col < Gomoku.WIDTH; col++) {
                stoneWasPrinted = false;
                //print the numbers for the first columns
                if (col == 0) {
                    System.out.print(COMP_TEXT_COLOR2 + BACKGROUND_COLOR_COMP +" ");
                    if (row + 1 < 10) {
                        System.out.print("0");
                    }
                    System.out.print(row + 1);
                    System.out.print(DEFAULT_TEXT_COLOR);
                    System.out.print(BACKGROUND_COLOR + " ");

                }

                //print either a blank space or the stone if it has the same coordinates
                for (Stone stone : game.getStones()) {
                    if (stone.getRow() == row && stone.getColumn() == col) {
                        //check the color
                        if (stone.isBlack()) {
                            System.out.print(BLACK_TEXT);
                            System.out.print(BLACK);
                        } else {
                            System.out.print(WHITE_TEXT);
                            System.out.print(WHITE);
                        }
                        System.out.print(DEFAULT_TEXT_COLOR);

                        //flag the stoneWasPrinted so that an empty is not printed
                        stoneWasPrinted = true;
                    }
                }
                //print an empty if no stone
                if (!stoneWasPrinted) {
                    System.out.print(EMPTY);
                }
                //print a line break if at the end of the columns
                if (col == 14) {
                    System.out.print(" ");
                    System.out.print(RESET_COLORS);
                    System.out.println();
                } else {
                    System.out.print(" ");
                }
            }
        }
        System.out.print(RESET_COLORS);
    }

    /**
     * Asks the user for a Y/N input to play again.
     * If Y, run() is called to reset and start a new game.
     * If N, the controller will exit.
     */
    private void playAgain(){
        String input;
        boolean cont = false;
        do {
            input = io.prompt("Play Again? [y/n]: ");
            if (input.equalsIgnoreCase("y")){
                cont = true;

            } else if (input.equalsIgnoreCase("n")) {
                System.out.println("Thanks for playing! Goodbye.");
                return;
            } else {
                System.out.println("Please enter 'y' or 'n'. ");
            }

        } while (!cont);
        System.out.println();
        run();


    }

    /**
     * Clears the board and initializes two players.
     * A new gomoku game instance is created with those two players.
     * The initial empty board is printed.
     */
    private void setUp(){

        //create player 1 and 2
        playerOne = playerMenu("Player 1");
        System.out.println();
        playerTwo = playerMenu("Player 2");

        //create a Gomoku instance with the players
        game = new Gomoku(playerOne, playerTwo);

        //print who goes first
        System.out.println();
        System.out.println(game.getCurrent().getName() + " goes first.");
        System.out.println();

        //print the initial board
        printBoard();
    }

    /**
     * Loops through each player's turns until the game is over.
     */
    private void gameLoop(){
        Result result;
        Stone stone;
        do {
            //print out whose turn it is
            System.out.println();
            //get color info
            String color;
            if (game.isBlacksTurn()){
                color = "(Black)";
            } else {
                color = "(White)";

            }
            System.out.println(game.getCurrent().getName() + color + "'s turn.");

            //make a move with the current player
            //place that move in the game
            //check the result
            stone = (makeMove(game.getCurrent()));
            result = game.place(stone);

            //if the move was a success, print the board
            if (result.isSuccess()) {
                //print the updated board
                System.out.println();
                printBoard();

            }
            //display the message
            if (result.getMessage() != null){
                System.out.println(result.getMessage());
            }
        }
        while (!game.isOver());
    }

}
